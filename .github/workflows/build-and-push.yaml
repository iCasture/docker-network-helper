name: Build and Push Docker Images

on:
  push:
    branches:
      - master
    paths:   # Trigger on changes to relevant files
      - Dockerfile.alpine
      - Dockerfile.debian
      - Dockerfile.debian-slim
      - Dockerfile.ubuntu
      - docker-bake.hcl
      - .github/build-params.json
      - .github/workflows/build-and-push.yaml
      - .github/actions/get-mitmproxy-version/**
      - .github/actions/login-registries/**
      - .github/actions/set-build-metadata/**
      - .github/actions/set-multi-image-tags/**
      - .github/actions/setup-docker/**
      - scripts/setup-mitmproxy.sh
      - scripts/check-mitmproxy-platform-and-arch.sh
      - scripts/create-mitmproxy-placeholders.sh
      - scripts/install-mitmproxy.sh
    tags:   # Trigger when tags are created. Match format like v1.2.3 (semantic versioning).
      - 'v*.*.*'
  release:   # Trigger when a new release is published
    types:
      - published
  schedule:   # Auto-trigger on 1st of each month at 00:00 UTC
    - cron: '0 0 1 * *'
  workflow_dispatch:   # Manual trigger

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
      mitmproxy-version: ${{ steps.get-mitmproxy-version.outputs.version }}
    steps:
      - uses: actions/checkout@v5

      - name: Get latest mitmproxy version from GitHub API
        id: get-mitmproxy-version
        uses: ./.github/actions/get-mitmproxy-version
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build matrix JSON from params
        id: build-matrix
        run: |
          params=$(cat .github/build-params.json)
          alpineBaseVersion=$(jq -r '.alpineVersion' <<<"$params")
          debianBaseVersion=$(jq -r '.debianVersion' <<<"$params")
          ubuntuBaseVersion=$(jq -r '.ubuntuVersion' <<<"$params")
          alpinePlatforms=$(jq -r '.alpinePlatforms' <<<"$params")
          debianPlatforms=$(jq -r '.debianPlatforms' <<<"$params")
          ubuntuPlatforms=$(jq -r '.ubuntuPlatforms' <<<"$params")

          matrix=$(jq -n --arg alpineBaseVersion "$alpineBaseVersion" \
                         --arg debianBaseVersion "$debianBaseVersion" \
                         --arg ubuntuBaseVersion "$ubuntuBaseVersion" \
                         --arg alpinePlatforms "$alpinePlatforms" \
                         --arg debianPlatforms "$debianPlatforms" \
                         --arg ubuntuPlatforms "$ubuntuPlatforms" \
            '{include: [
              { "variant": ("alpine" + $alpineBaseVersion),  "base-type": "alpine",      "platforms":$alpinePlatforms },
              { "variant": $debianBaseVersion,               "base-type": "debian",      "platforms":$debianPlatforms },
              { "variant": ($debianBaseVersion + "-slim"),   "base-type": "debian-slim", "platforms":$debianPlatforms },
              { "variant": $ubuntuBaseVersion,               "base-type": "ubuntu",      "platforms":$ubuntuPlatforms }
            ]}')

          {
            echo "matrix<<EOF"
            echo "$matrix"
            echo "EOF"
          } >> $GITHUB_OUTPUT

  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: prepare
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - name: Check event source
        run: |
          echo "Triggered by: ${{ github.event_name }}"

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker build environment
        uses: ./.github/actions/setup-docker
        with:
          platforms: all

      - name: Log in to registries
        uses: ./.github/actions/login-registries
        with:
          dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set build metadata
        id: set-build-metadata
        uses: ./.github/actions/set-build-metadata

      - name: Set image tags for all targets
        id: set-tags
        uses: ./.github/actions/set-multi-image-tags
        with:
          variant: ${{ matrix.variant }}
          base-type: ${{ matrix['base-type'] }}
          targets: basic,standard,advanced
          sha-short: ${{ steps.set-build-metadata.outputs['sha-short'] }}
          owner-lowercase: ${{ steps.set-build-metadata.outputs['owner-lowercase'] }}
          dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME }}

      - name: Build and push all targets with Docker Bake
        uses: docker/bake-action@v6
        with:
          files: docker-bake.hcl
          targets: default
          push: true
          # pull: true
        env:
          DISTRO: ${{ matrix['base-type'] }}
          DISTRO_VERSION: ${{ matrix.variant }}
          PLATFORMS: ${{ matrix.platforms }}
          MAINTAINER: ${{ steps.set-build-metadata.outputs['owner'] }}
          BUILD_DATE: ${{ steps.set-build-metadata.outputs.date }}
          BUILD_EPOCH: ${{ github.run_id }}-${{ github.run_attempt }}
          GIT_COMMIT: ${{ steps.set-build-metadata.outputs['sha-full'] }}
          MITMPROXY_VERSION: ${{ needs.prepare.outputs.mitmproxy-version }}
          TAGS_BASIC: ${{ steps.set-tags.outputs.tags-basic }}
          TAGS_STANDARD: ${{ steps.set-tags.outputs.tags-standard }}
          TAGS_ADVANCED: ${{ steps.set-tags.outputs.tags-advanced }}
